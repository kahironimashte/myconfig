#+TODO: TODO FEHLER  | OK DONE
* Weg zur perfekten Config
** Look [2/3]
*** TODO Theme - Farben aussuchen und anpassen
*** DONE Schrift auf IBM umstellen und Größen anpassen :ARCHIVE:
*** DONE Bullets verschönern :ARCHIVE:
** Editing
*** Cheatsheet für Editing-Befehle
*** Tastenkürzel anpassen
** Versionierung (git)
** Termine Synchronisieren (tickler)
** File-Struktur überarbeiten (arbeit/home/someday)
** Erweiterungen
*** Super Agenda
*** General.el
*** Hydra.el /hercules.el
*** Rechtschreibung
*** Export-Templates
*** Suche per Ivy/Helm/ripgrep
*** RSS-Reader?
*** Notmuch Emails
*** Doom-Emacs Lazy load
** Publemacs - Emacs für Publisher
*** Hilfsprogramm, das einen Entscheidungsweg über einen Minibuffer liefert
*** Tastenkürzel optimiert für Redakteure
*** Wissensmanagement in Emacs
*** Fragen
**** Was müssen Coding-Journalisten (CJs) können? 
     - Auch visuelle möglichkeiten wie 3D.js oder nur Infromationsbeschaffung über Sraping, Datenverarbeitung?
** Jouraling
*** Date-Trees
*** CaptureTemplates
*** Archivieren
*** Verschlüsselung
** Gestalten
*** Grundlagen Emacs Lisp
*** JS-Modes und Webdev-Modes
* Org Mode Settings
** Fokus
*** COMMENT Alles einklappen außer aktuellen Subtree
#+BEGIN_SRC emacs-lisp
(defun ess/org-show-just-me (&rest _)
  "Fold all other trees, then show direct children of current org-heading."
  (interactive)
  (org-overview)
  (org-reveal)
  (org-show-children)
)
(add-hook 'org-after-sorting-entries-or-items-hook 'ess/org-show-just-me)
#+END_SRC
**  Keys and Shortcuts
#+BEGIN_SRC emacs-lisp

 ;; Org-mode settings
 (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
 (global-set-key "\C-cl" 'org-store-link)
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cc" 'org-capture)
 (global-font-lock-mode 1)
 ;; Setting custom Keys
 (global-set-key (kbd "C-c s") 'org-sparse-tree)
 (global-set-key (kbd "C-c x") 'other-window)
 (global-set-key (kbd "C-c y") 'delete-other-windows)

 (global-set-key (kbd "C-c n") 'org-narrow-to-subtree)
 (global-set-key (kbd "C-c m") 'widen)
 (global-set-key (kbd "C-c i") 'org-clock-in)
 (global-set-key (kbd "C-c o") 'org-clock-out)
 (global-set-key (kbd "C-c j") 'org-clock-goto)

  ;; Activate plain list cycle
  (setq org-list-use-circular-motion t)
 #+END_SRC
**** Split und Switch
     - Gibt eine Schnelle übersicht in einem halben Fenster. 
#+BEGIN_SRC emacs-lisp
 (defun kahiro-split-and-switch ()
  "Split the window and switch to the other window in sequence."
  (interactive)
  (split-window-right)
  (org-tree-to-indirect-buffer)
  (other-window 1))
 (global-set-key (kbd "C-c v") 'kahiro-split-and-switch)

#+END_SRC
**** Switch und Close
     - Kehrt wieder zum Übersichtsbuffer zurück. 
#+BEGIN_SRC emacs-lisp
 (defun kahiro-switch-and-close ()
  "Split the window and switch to the other window in sequence."
  (interactive)
;;  (kill-buffer)
  (delete-window)
;;  (other-window -1)
;;  (delete-other-windows)
 )

 (global-set-key (kbd "C-c V") 'kahiro-switch-and-close)
#+END_SRC
** org-habit :local:
Mit org-habit kann man regelmäßige Aufgaben verfolgen, etwa den Müll rausbringen, oder Sport treiben. Man kann es so einstellen, dass die Aufgabe nur alle x Tage auftaucht. 
#+BEGIN_SRC emacs-lisp
;; Den Habit-Graph auf Position (von links) bringen.
(setq org-habit-graph-column 50)
#+END_SRC
** Clocking / Aufwand
#+BEGIN_SRC emacs-lisp
;; CLOCKING: global Effort estimate values
(setq org-global-properties
      '(("Effort_ALL" .
         "1:00 2:00 3:00 4:00 5:00 0:10 0:20 0:30 0:45 0:00 6:00 7:20 8:00 9:00 10:00")))
;;        1    2    3    4    5    6    7    8    9    0
;; These are the hotkeys

;; CLOCKING: Set default column view headings: Task Priority Effort Clock_Summary
(setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %5Effort(Effrt){:} %5CLOCKSUM %TAGS %TODO")
#+END_SRC
** Agenda-Mode
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-deadline-prewarning-if-scheduled t
      org-deadline-warning-days 2)

(add-hook 'org-agenda-mode-hook
	  (lambda()
	    (local-set-key (kbd "S-<up>") 'org-agenda-date-earlier-hours)
	    (local-set-key (kbd "S-<down>") 'org-agenda-date-later-hours)
     ))
#+END_SRC
*** Custom Agenda Commands
#+BEGIN_SRC emacs-lisp
;; default agenda commands
(setq org-agenda-custom-commands
   '(
     ("g" tags-tree "g" ((org-show-context-detail 'ancestors)))
     ("w" tags-tree "w" ((org-show-context-detail 'ancestors)))
    )
)
 #+END_SRC
**** Patch for Ancestors-View
#+BEGIN_SRC emacs-lisp
(el-patch-defun org-show-set-visibility (detail)
  "Set visibility around point according to DETAIL.
DETAIL is either nil, `minimal', `local', `ancestors', `lineage',
`tree', `canonical' or t.  See `org-show-context-detail' for more
information."
  ;; Show current heading and possibly its entry, following headline
  ;; or all children.
  (if (and (org-at-heading-p) (not (eq detail (el-patch-swap
                                                'local
                                                'ancestors))))
      (org-flag-heading nil)
    (org-show-entry)
    ;; If point is hidden within a drawer or a block, make sure to
    ;; expose it.
    (dolist (o (overlays-at (point)))
      (when (memq (overlay-get o 'invisible) '(org-hide-block outline))
        (delete-overlay o)))
    (unless (org-before-first-heading-p)
      (org-with-limited-levels
       (cl-case detail
         ((tree canonical t) (org-show-children))
         ((nil minimal ancestors))
         (t (save-excursion
              (outline-next-heading)
              (org-flag-heading nil)))))))
  ;; Show all siblings.
  (when (eq detail 'lineage) (org-show-siblings))
  ;; Show ancestors, possibly with their children.
  (when (memq detail '(ancestors lineage tree canonical t))
    (save-excursion
      (while (org-up-heading-safe)
        (org-flag-heading nil)
        (when (memq detail '(canonical t)) (org-show-entry))
        (when (memq detail '(tree canonical t)) (org-show-children))))))
#+END_SRC
*** Default Org-Agenda Span
#+BEGIN_SRC emacs-lisp
;; Default span
(setq org-agenda-span 2)
#+END_SRC
*** Agenda Capture Templates
#+BEGIN_SRC emacs-lisp
;; Caprture Templates
(setq org-capture-templates
   '(
      ("t" "Todo [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "* TODO %i%?")
      ("r" "Todo w Schedule [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "** TODO %^{Titel} \n SCHEDULED: %^{Startzeitpunkt}t")
      ("d" "Todo w Deadline [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "** TODO %^{Titel} \n DEADLINE: %^{Faellig bis}t")
      ("n" "Todo now [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "* TODO %i%? \n SCHEDULED: %T")
      ("z" "Ziele (inbox-Tree)" entry (file+headline "~/ncloud/org/ziele.org" "Inbox") "* TODO %i%?")
      ("s" "prefix für someday-Tasks")
      ("sa" "Todo [someday Arbeit]" entry (file+headline "~/ncloud/org/asomeday.org" "Inbox") "* TODO %i%?")
      ("sh" "Todo [someday Home]" entry (file+headline "~/ncloud/org/hsomeday.org" "Inbox") "* TODO %i%?")
      ("T" "Tickler" entry (file+headline "~/ncloud/org/tickler.org" "Tickler") "** %^{Title} \n %^t")
      ("R" "Scheduled Tickler" entry (file+headline "~/ncloud/org/tickler.org" "Tickler") "** %^{Title} \n SCHEDULED: %^t")
  )
)
#+END_SRC
*** setting Refile Targets
#+BEGIN_SRC emacs-lisp
;; setting Refile Target
;;----------------------
(setq org-refile-targets '((org-agenda-files :maxlevel . 2))) ;; include all Agenda-Files and all Heading up to **
(setq org-refile-allow-creating-parent-nodes 'confirm)        ;;allow creating nodes. Refile has to end with /newheadingname
#+END_SRC
** Make org beautiful
#+BEGIN_SRC emacs-lisp
;; Make Org beautiful
;;-------------------
(setq org-hide-emphasis-markers t) ;; hide Markers like *this* for bold
#+END_SRC
** COMMENT Electric Pair Mode
- [2020-04-28 Tue 22:40] deaktiviert weil die doppelten Anführungszeichen beim Schreiben nerven.
#+BEGIN_SRC emacs-lisp
;; ELECTRIC PAIR MODE (BUILT IN)
;; ----------------------------
(electric-pair-mode 1)

(defvar org-electric-pairs '((?\* . ?\*) (?/ . ?/) (?= . ?=)
                             (?\_ . ?\_) (?~ . ?~) (?+ . ?+)) "Electric pairs for org-mode.")

(defun org-add-electric-pairs ()
  (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
  (setq-local electric-pair-text-pairs electric-pair-pairs))

;; (add-hook 'org-mode-hook 'org-add-electric-pairs)

;; Hide leading stars
(setq org-hide-leading-stars t)
#+END_SRC
** Use Org-Bulles
  Schönere Auflist-Zeichen (in UTF8) für Org-Überschriften
  #+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
 #+END_SRC
 #+BEGIN_SRC  emacs-lisp
  ;; make available "org-bullet-face" such that I can control the font size individually
 (setq org-bullets-bullet-list '("⚜" "⚙" "❖" "✿" "❄" "❋" "★" "⚛")) ;; "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"
 #+END_SRC
** Set custom ellipsis (...)
 #+BEGIN_SRC emacs-lisp
 (setq org-ellipsis "⤵")
  #+END_SRC

* Moving around

** RYO Key settings
*** Colors
#+BEGIN_SRC emacs-lisp
(setq ryo-modal-cursor-color "maroon")
(setq ryo-modal-default-cursor-color "grey15")
#+END_SRC
*** Basics
    + [2020-05-12 Di 13:36] Zahlen ausgeklammert, da ich sie kaum als Prefix brauche.
 #+BEGIN_SRC emacs-lisp
     (use-package ryo-modal
       :commands ryo-modal-mode
       :bind ("S-SPC" . ryo-modal-mode)
       :config
       (ryo-modal-keys
	("," ryo-modal-repeat)
	("q" ryo-modal-mode))
	
       (ryo-modal-keys
	;; First argument to ryo-modal-keys may be a list of keywords.
	;; These keywords will be applied to all keybindings.
	(:norepeat t)
        ("u" universal-argument)
	("h" backward-char)
	("j" next-line)
	("k" previous-line)
	("l" forward-char)
	("e" "C-e")
	("a" "C-a")
	("I" "M-a")
	("O" "M-e")
	("A" "M-<")
	("E" "M->")
;;	("0" "M-0")
;;	("1" "M-1")
;;	("2" "M-2")
;;	("3" "M-3")
;;	("4" "M-4")
;;	("5" "M-5")
;;	("6" "M-6")
;;	("7" "M-7")
;;	("8" "M-8")
;;	("9" "M-9")
)

   )
 #+End_SRC

*** Multiple Keys
    Hier werden Befehle mit mehr als einem Tastenkürzel ausgeführt. Der erste Buchstabe ist also ein Prefix, auf den noch mindestens ein weiterer folgt.
#+BEGIN_SRC emacs-lisp 
 (ryo-modal-keys 
    ;;(("SPC" set-mark-command)))
    ("c"
     (
     ("c" org-capture)
     ("a" org-attach)
     ("b" org-backward-heading-same-level)
     ("C" org-ctrl-c-ctrl-c)
     ("d" org-deadline)
     ("e" org-export-dispatch)
     ("f" org-forward-heading-same-level)
     ("j" org-goto)
     ("k" org-kill-note-or-show-branches)
     ("l" org-insert-link)
     ("o" org-open-at-point)
     ("q" org-set-tags-command)
     ("r" org-reveal)
     ("s" org-schedule)
     ("t" org-todo)
     ("w" org-refile)
     ("*" org-list-make-subtree)
     ("RET" org-ctrl-c-ret)
     ("y" org-evaluate-time-range)
     ("z" org-add-note)
     ("^" org-up-element)
     ("_" org-down-element)
     ("SPC" org-table-blank-field)
     ("!" org-time-stamp-inactive)
     ("#" org-update-statistics-cookies)
     ("%" org-mark-ring-push)
     ("&" org-mark-ring-goto)
     ("'" org-edit-special)
     ("*" org-ctrl-c-star)
     ("+" org-table-sum)
     ("," org-priority)
     ("-" org-ctrl-c-minus)
     ("." org-time-stamp)
     ("/" org-sparse-tree)
     (":" org-toggle-fixed-width)
     (";" org-toggle-comment)
     ("<" org-date-from-calendar)
     ("=" org-table-eval-formula)
     (">" org-goto-calendar)
     ("?" org-table-field-info)
     ("@" org-mark-subtree)
     ("\[" org-agenda-file-to-front)
     ("\\" org-match-sparse-tree)
     ("\]" org-remove-file)
     ("^" org-sort)
     ("`" org-table-edit-field)
     ("{" org-table-toggle-formula-debugger)
     ("|" org-table-create-or-convert-from-region)
     ("}" org-table-toggle-coordinate-overlays)
     ("~" org-table-create-with-table.el)
     ))
    ("z"
     (("z" org-time-stamp)
      ("t" org-time-stamp-inactive)
      ("c" org-toggle-timestamp-type)))
    ("d"
     (("u" outline-up-heading)
      ("l" org-forward-heading-same-level)
      ("h" org-backward-heading-same-level)
      ("j" org-next-visible-heading)
      ("k" org-previous-visible-heading)
      ))
    ("x"
     (("s" save-some-buffers)
      ("f" find-file)
     ))
    ("g"
     (("a" org-agenda)
      ("g" switch-to-buffer)
      ("o" other-window)
      ("f" kahiro-split-and-switch)
      ("k" kahiro-switch-and-close)
      ("t" org-sparse-tree)
      ("q" undo)
      ("w" delete-other-windows)))
    ("n" 
     (("s" org-narrow-to-subtree)
      ("w" widen)
;;      ("x" org-agenda-set-restriction-lock)
;;      ("y" org-agenda-remove-restriction-lock)
      ))  
    ("t"
     (("i" org-clock-in)
      ("o" org-clock-out)
      ("j" org-clock-goto)
      ("x" org-clock-in-last)
      ("q" org-clock-cancel)
      ("d" org-clock-display)
      ("t" org-todo))
    )) 

(define-key universal-argument-map (kbd "u") 'universal-argument-more)
#+END_SRC

*** Single Binds
    Hier wird nur ein Key einem anderen zugewiesen oder einer Funktion. Das heißt alle Befehle werden mit nur einem Tastendruck ausgeführt.
#+BEGIN_SRC emacs-lisp 
  (ryo-modal-keys
    ("ä" org-mark-subtree :then '(next-line count-words))
    ("K" "C-k")
    ("C" org-ctrl-c-ctrl-c)
    ("_" "C-_")
    ("y" "C-y")
    ("w" "M-w")
    ("W" "C-w")
    ("L" "C-l")
    ("v" "C-v")
    ("V" "M-v")
    ("i" "M-b")
    ("o" "M-f")
    ("SPC" org-cycle)
    ("ö" set-mark-command)
    ("s" isearch-forward)
    ("r" isearch-backward)
  )
    #+END_SRC

*** Org-Agenda-Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook 'ryo-modal-mode)
    (ryo-modal-major-mode-keys
     'org-agenda-mode
	    ("x"
	     (("s" org-save-all-org-buffers)
	      ("w" org-agenda-write)
	      ("u" org-agenda-undo)))
	    ("t" org-agenda-todo)
	    ("h" backward-char)
	    ("j" next-line)
	    ("k" previous-line)
	    ("l" forward-char)
	    ("n" org-agenda-next-item)
	    ("p" org-agenda-previous-item)
	    ("N" org-agenda-next-date-line)
	    ("P" org-agenda-previous-date-line)
	    ("c"
	     (("d" org-agenda-deadline)
	      ("n" org-agenda-next-date-line)
	      ("o" org-agenda-open-link)
	      ("p" org-agenda-previous-date-line)
	      ("q" org-agenda-set-tags)
	      ("s" org-agenda-schedule)
	      ("t" org-agenda-todo)
	      ("w" org-agenda-refile)
	      ("z" org-agenda-add-note)
	      ("$" org-agenda-archive)
	      ("," org-agenda-priority)
	      ("c" org-agenda-goto-calendar)
     	      ("x"
     	       (("a" org-agenda-archive-default)
     	        ("c" org-agenda-columns)
       	   ;;   ("e" org-clock-modify-effort-estimate)
     	        ("TAB" org-agenda-clock-in)
     	        ("j" org-clock-goto)
     	        ("o" org-agenda-clock-out)
     	        ("s" org-agenda-archive)
     	        ("x" org-agenda-clock-cancel)
     	        ("!" org-reload)
     	        ("<" org-agenda-set-restriction-lock-from-agenda)
     	        (">" org-agenda-remove-restriction-lock)
     	        ("A" org-agenda-archive-to-archive-sibling)
     	        ("a" org-agenda-toggle-archive-tag)
     	        ("b" org-agenda-tree-to-indirect-buffer)
     	        ("e" org-agenda-set-effort)
     	        ("p" org-agenda-set-property)
     	        ("<down>" org-agenda-priority-down)
     	        ("<left>" org-agenda-do-date-earlier)
     	        ("<right>" org-agenda-do-date-later)
     	        ("<up>" org-agenda-priority-up))
     	       )))
	    ("SPC" org-agenda-show-and-scroll-up)
	    ("!" org-agenda-toggle-deadlines)
	    ("#" org-agenda-dim-blocked-tasks)
	    ("$" org-agenda-archive)
	    ("%" org-agenda-bulk-mark-regexp)
	    ("*" org-agenda-bulk-mark-all)
	    ("+" org-agenda-priority-up)
	    ("," org-agenda-priority)
	    ("-" org-agenda-priority-down)
	    ("." org-agenda-goto-today)
	    ("/" org-agenda-filter-by-tag)
	    (":" org-agenda-set-tags)
	    (";" org-timer-set-timer)
	    ("<" org-agenda-filter-by-category)
	    ("=" org-agenda-filter-by-regexp)
	    (">" org-agenda-date-prompt)
	    ("?" org-agenda-show-the-flagging-note)
	    ("A" org-agenda-append-agenda)
	    ("B" org-agenda-bulk-action)
	    ("C" org-agenda-convert-date)
	    ("D" org-agenda-toggle-diary)
	    ("E" org-agenda-entry-text-mode)
	    ("F" org-agenda-follow-mode)
	    ("G" org-agenda-toggle-time-grid)
	    ("I" org-agenda-clock-in)
	    ("M" org-agenda-phases-of-moon)
	    ("O" org-agenda-clock-out)
	    ("Q" org-agenda-Quit)
	    ("R" org-agenda-clockreport-mode)
	    ("S" org-agenda-sunrise-sunset)
	    ("T" org-agenda-show-tags)
	    ("U" org-agenda-bulk-unmark-all)
	    ("X" org-agenda-clock-cancel)
	    ("[" org-agenda-manipulate-query-add)
	    ("]" org-agenda-manipulate-query-subtract)
	    ("^" org-agenda-filter-by-top-headline)
	    ("_" org-agenda-filter-by-effort)
	    ("a" org-agenda-archive-default-with-confirmation)
	    ("b" org-agenda-earlier)
	    ("d" org-agenda-day-view)
	    ("e" org-agenda-set-effort)
	    ("f" org-agenda-later)
	    ("g" org-agenda-redo-all)
	    ("H" org-agenda-holidays)
	    ("J" org-agenda-goto-date)
	    ("K" org-agenda-capture)
	    ("L" org-agenda-log-mode)
	    ("m" org-agenda-bulk-mark)
	    ("o" delete-other-windows)
	    ("q" org-agenda-quit)
	    ("r" org-agenda-redo)
	    ("s" org-save-all-org-buffers)
	    ("t" org-agenda-todo)
	    ("u" org-agenda-bulk-unmark)
	    ("v" org-agenda-view-mode-dispatch)
	    ("w" org-agenda-week-view)
	    ("x" org-agenda-exit)
	    ("y" org-agenda-year-view)
	    ("z" org-agenda-add-note)
	    ("{" org-agenda-manipulate-query-add-re)
	    ("|" org-agenda-filter-remove-all)
	    ("}" org-agenda-manipulate-query-subtract-re)
	    ("~" org-agenda-limit-interactively)
    )
#+END_SRC


**  Jump in the document
   "Move cursor to last mark position of current buffer.
   Call this repeatedly will cycle all positions in `mark-ring'.
   URL `http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html'
   Version 2016-04-04"
 #+BEGIN_SRC emacs-lisp
   (defun xah-pop-local-mark-ring ()
     (interactive)
     (set-mark-command t))
   (global-set-key (kbd "<f8>") 'pop-global-mark)
   (global-set-key (kbd "<f7>") 'xah-pop-local-mark-ring) 
 #+END_SRC 

* Allgemeine Einstellungen

** Sicherung

*** Ordner für Autosave-Dateien
Emacs speichert Dateien wenn sie offen sind unter kryptischen Dateinamen (#datei.org# oder datei.org~). Diese machen den Ordner unübersichtlich, können aber in einem eigenen Verzeichnis angesiedelt werden. 
#+BEGIN_SRC emacs-lisp 
(setq backup-directory-alist '(("." . "~/ncloud/_config/backups/")))
#+END_SRC


* Rechtschreibung
#+BEGIN_SRC  emacs-lisp
;; Rechtschreibung
;;----------------
;; Ich musste noch das deutsche Wörterbuch installieren, bevor es klappt: sudo apt-get install aspell-de
 (setq ispell-dictionary "deutsch8")
 (setq ispell-local-dictionary "deutsch")
 (setq flyspell-default-dictionary "deutsch8")
 (add-hook 'text-mode-hook 'flyspell-mode)
 (autoload 'flyspell-mode "flyspell" "On-the-fly ispell." t)
 (setq flyspell-issue-welcome-flag nil)
#+END_SRC
* Package
** COMMENT Enable Pakages from the MELPA Repositories
#+BEGIN_SRC emacs-lisp
#+END_SRC
** COMMENT Initialize
This initializes all packages. 

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
#+BEGIN_SRC emacs-lisp(package-initialize)
#+END_SRC
** Steam Games list
#+BEGIN_SRC emacs-lisp
(setq steam-username "mec4nic") ;; Replace Username with your steam username
#+END_SRC
steam.el can not get a list of your games unless your Steam profile is public. Visit https://steakmcommunity.com/id/username/edit/settings (where username is replaced with your Steam username). Set your profile to Public and make sure that Game details is set to Public.
Usage

    To launch a game: M-x steam-launch
    To insert your game list in org-mode format: M-x steam-insert-org-text
    Download logotypes for your games, and insert them into org-mode: M-x steam-insert-org-images
    To update your game list (if you’ve installed new games without restarting Emacs): M-x steam-get-games

In org-mode, you can click links in order to run your games. This will bring up a pop-up, asking if it is safe to run the lisp-code. If this annoys you, put this line at the top of your .org-file: #-*- org-confirm-elisp-link-function: nil; -*-

If you insert the logotype images into org-mode, make sure to turn on org-display-inline-images. You can also put #+STARTUP:inlineimages at the top of your .org-file.
* Fokus
** COMMENT Apply :Archive: Tag to DONE Tasks
#+BEGIN_SRC emacs-lisp
(setq org-todo-state-tags-triggers
  (quote 
  (("DONE" ("ARCHIVE" . t)) ;; Set ARCHIVE tag when state changes to DONE
   ("" ("ARCHIVE"))         ;; Unset ARCHIVE tag when state changes to "" (no state)
  )))
#+END_SRC
* Appearance :appearance:
** Style Tags based on Regular Expressions :one:
*** Code
#+BEGIN_SRC emacs-lisp
;; (require 'org)
(set-face-attribute 'org-tag nil :height 0.5 :slant 'normal :weight 'normal :foreground "LavenderBlush3")

(add-to-list 'org-tag-faces '("@.*" . (:foreground "cyan" :height 0.8)))

;; Reset the global variable to nil, just in case org-mode has already beeen used.
(when org-tags-special-faces-re
  (setq org-tags-special-faces-re nil))

(defun org-get-tag-face (kwd)
  "Get the right face for a TODO keyword KWD.
If KWD is a number, get the corresponding match group."
  (if (numberp kwd) (setq kwd (match-string kwd)))
  (let ((special-tag-face (or (cdr (assoc kwd org-tag-faces))
                              (and (string-match "^@.*" kwd)
                                   (cdr (assoc "@.*" org-tag-faces))))))
    (or (org-face-from-face-or-color 'tag 'org-tag special-tag-face)
        'org-tag)))
#+END_SRC
*** Info from [[https://stackoverflow.com/questions/40876294/color-tags-based-on-regex-emacs-org-mode][Stackoverflow]]
The following answer uses the built-in mechanisms of org-mode. The variable org-tag-faces accepts a regexp for the tag, which is the car of the cons cell. The function org-set-tag-faces sets a global variable org-tags-special-faces-re, which combines the tags of the aforementioned cons cell(s). The global variable org-tags-special-faces-re is used by org-font-lock-add-tag-faces to re-search-forward through the org-mode buffer -- locating the matching tags and applying the appropriate face based on the function org-get-tag-face. The original version of the function org-get-tag-face looked for an exact match of the tag found (i.e., the key argument to the function assoc). The revised version of org-get-tag-face adds an additional key search for @.* and returns the proper face if the key is found -- this is necessary because the tag itself will usually look something like @home or @office, whereas our context regexp is @.*.

Wow, thank's a lot, that's cool even if I don't understand everything (my knowledges about lisp and emacs-lisp are very limited ^^). Now, say that I want to do the same with other regex, can you explain me (in the simpliest way) how do I do ? – boehm_s Dec 1 '16 at 20:43

The car of each cons cell of org-tag-faces is by its very nature a regexp, which gets processed into something that eventually looks like this: ":\\(@.*\\|TOP\\|HIGH\\|MEDIUM\\|LOW\\|NEGATIVE):" So, it is already set up to work with regexp out-of-the-box. The change that needs to be made is how org-get-tag-face locates a match within org-tag-faces. You could add additional entries to org-tag-faces with your regexp, and add additional entries to org-get-tag-face -- e.g., just above (cdr (assoc "@.*" org-tag-faces)). – lawlist Dec 1 '16 at 20:50

For example, (add-to-list 'org-tag-faces '("MYREGEX" . (:foreground "red"))) and just above (cdr (assoc "@.*" org-tag-faces)) in org-get-tag-face, insert (cdr (assoc "MYREGEX" org-tag-faces)) The function assoc is using equal to find an exact key match. – lawlist Dec 1 '16 at 20:55

I changed (cdr (assoc "@.*" org-tag-faces)) to (and (string-match "^@.*" kwd) (cdr (assoc "@.*" org-tag-faces))) to ensure that kwd is indeed a context tag before testing to see if a context tag regexp is a car of one of the cons cells that make up org-tag-faces. This will be important if you decide to add additional regexp to org-get-tag-face; e.g., adding an additional (and (string-match "MYREGEX" kwd) (cdr (assoc "MYREGEX" org-tag-faces))) – lawlist Dec 1 '16 at 23:52
** Tag Alignment :org:
Legt die Spalte fest, auf die Tags angeordnet werden sollen. Durch Schriftarten mit variablen Breiten ergibt sich allerdings nie ein einheitliches Bild. Daher setze ich den Wert auf 0, so dass die Tags direkt an den Überschriften anschließen. 

#+BEGIN_SRC emacs-lisp
(setq org-tags-column 0)
#+END_SRC
** Fonts and Faces
*** Font Weight :wissen:
    - :weight ([[https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html][Quelle]])
      - Font weight—one of the symbols (from densest to faintest) ultra-bold, extra-bold, bold, semi-bold, normal, semi-light, light, extra-light, or ultra-light. On text terminals which support variable-brightness text, any weight greater than normal is displayed as extra bright, and any weight less than normal is displayed as half-bright. 
** Force default Font
#+BEGIN_SRC  emacs-lisp
(add-to-list 'default-frame-alist '(font . "Noto Mono-15" ))
(set-face-attribute 'default t :font "Noto Mono-15" )
;; To see available fonts evaluate the following in the *scratch* buffer
;; (message (mapconcat (quote identity) (sort (font-family-list) #'string-lessp) "\n"))

#+END_SRC
** Set variable pitch font
#+BEGIN_SRC emacs-lisp

;; Set variable-pitch font using customize-face variable-pitch
;; Set the fonts to format correctly for specific modes. Default is set for fixed
;; so we only need to have the exceptions
(defun set-buffer-variable-pitch ()
  (interactive)
  (variable-pitch-mode t)
  (setq line-spacing 3)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-link nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch)
  )

(add-hook 'org-mode-hook 'set-buffer-variable-pitch)
(add-hook 'Info-mode-hook 'set-buffer-variable-pitch)

#+END_SRC
** Org Meta Line (#+-Lines)
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-meta-line nil :height 0.5 :slant 'normal :foreground "LavenderBlush3")
#+END_SRC

* Default Modes ON
#+BEGIN_SRC emacs-lisp
;; Default Modes ON
(global-visual-line-mode t)

#+END_SRC
* Sonstiges
** Template Expansion - Abkürzugnen für häufige Ausdrücke
- [ ] Dieser Code muss für *Org ab 9.2* angepasst werden zu org-temo-keyword-alist. Außerdem braucht man (require 'org-tempo)
#+BEGIN_SRC emacs-lisp
;; Code für emacs-lisp
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
;; Code für SCHEDULED:
(add-to-list 'org-structure-template-alist '("S" "SCHEDULED: ?"%T))
#+END_SRC
SCHEDULED: 
** Saving Desktop Sessions
 #+BEGIN_SRC emacs-lisp
 ;; SAVING DESKTOP SESSIONS
 ;;------------------------
 (desktop-save-mode 1)
#+END_SRC
** Start any Windows maximised
#+BEGIN_SRC emacs-lisp
 ;; Start any Windows maximised
 (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Sentence end to just one space
#+BEGIN_SRC emacs-lisp
 ;; Set Sentence end to just one space
 (setq sentence-end-double-space nil)
#+END_SRC
** Workarounds 
#+BEGIN_SRC emacs-lisp
 ;; Workarounds
 ;; Bug 34341
 (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
 #+END_SRC
* Custom Functions
** FEHLER COMMENT Count Tags
   - [2020-04-19 Sun] ggf. gibt es einen Konflikt mit [[*Style Tags based on Regular Expressions][Style Tags based on Regular Expressions]]
#+BEGIN_SRC emacs-lisp
(defun count-tags ()
  (let (tags count)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward org-complex-heading-regexp nil t)
        (dolist (tag (org-get-tags))
          (push tag tags)))
      (cl-loop with result
               for tag in tags
               do (push (list (cl-count tag tags
                                        :test #'string=)
                              tag)
                        count)
               collect
               (setq result (cl-remove-duplicates count
                                                  :test #'equal))
               finally return
               (cl-sort result #'> :key #'car)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
:colnames '(freq tags)
(count-tags)
#+END_SRC
#+results:
| 67 |       |
|  1 | one   |
|  1 | @two  |
|  1 | three |

* UI preferences
** Tweak window chrome

    I don't usually use the menu or scroll bar, and they take up useful space.

 #+begin_src emacs-lisp
   (tool-bar-mode 0)
   (menu-bar-mode 0)
   (scroll-bar-mode -1)
 #+end_src

 There's a tiny scroll bar that appears in the minibuffer window. This disables
 that:

 #+begin_src emacs-lisp
   (set-window-scroll-bars (minibuffer-window) nil nil)
 #+end_src
** [#C] Use fancy lambdas
Ersetzt lamba ( ) mit dem Lambda-Symbol

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src

** [#B] Use =moody= for a beautiful modeline

This gives me a truly lovely ribbon-based modeline.

#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))


#+end_src


* Notizen

** Source Blocks
They changed the template system in orgmode 9.2.

The new mechanism is called structured template. The command org-insert-structure-template bound to *C-c C-,* gives you a list of #+begin_-#+end_ pairs that narrows down while you type and you can use completion.

But, you can also get the old easy template system back, either

    by adding (require 'org-tempo) to your init file or
    by adding org-tempo to the list org-modules. You can do that by customizing org-modules.
** Difference in Files
18.9 Comparing Files

The command M-x diff prompts for two file names, using the minibuffer, and displays the differences between the two files in a buffer named *diff*. This works by running the diff program, using options taken from the variable diff-switches. The value of diff-switches should be a string; the default is "-u" to specify a unified context diff. See Diff, for more information about the diff program.

The output of the diff command is shown using a major mode called Diff mode. See Diff Mode.

A (much more sophisticated) alternative is M-x ediff (see Ediff).

The command M-x diff-backup compares a specified file with its most recent backup. If you specify the name of a backup file, diff-backup compares it with the source file that it is a backup of. In all other respects, this behaves like M-x diff.

The command M-x diff-buffer-with-file compares a specified buffer with its corresponding file. This shows you what changes you would make to the file if you save the buffer.

The command M-x compare-windows compares the text in the current window with that in the window that was the selected window before you selected the current one. (For more information about windows in Emacs, Windows.) Comparison starts at point in each window, after pushing each initial point value on the mark ring (see Mark Ring) in its respective buffer. Then it moves point forward in each window, one character at a time, until it reaches characters that don't match. Then the command exits.

If point in the two windows is followed by non-matching text when the command starts, M-x compare-windows tries heuristically to advance up to matching text in the two windows, and then exits. So if you use M-x compare-windows repeatedly, each time it either skips one matching range or finds the start of another.

With a numeric argument, compare-windows ignores changes in whitespace. If the variable compare-ignore-case is non-nil, the comparison ignores differences in case as well. If the variable compare-ignore-whitespace is non-nil, compare-windows by default ignores changes in whitespace, but a prefix argument turns that off for that single invocation of the command.

You can use M-x smerge-mode to turn on Smerge mode, a minor mode for editing output from the diff3 program. This is typically the result of a failed merge from a version control system update outside VC, due to conflicting changes to a file. Smerge mode provides commands to resolve conflicts by selecting specific changes.

See Emerge, for the Emerge facility, which provides a powerful interface for merging files. 
