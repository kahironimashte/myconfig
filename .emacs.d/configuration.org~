* Weg zur perfekten Config
** Look 
*** Schrift auf IBM umstellen und Größen anpassen
*** Theme - Farben aussuchen und anpassen
*** DONE Bullets verschönern
** Editing
*** Cheatsheet für Etiting-Befehle
*** Tastenkürzel anpassen
** TODO Versionierung (git)
** TODO Termine Synchronisieren (tickler)
** TODO File-Struktur überarbeiten (arbeit/home/someday)
** Erweiterungen
*** Super Agenda
*** Rechtschreibung
*** Export-Templates
*** Suche per Ivy/Helm/ripgrep
*** RSS-Reader?
*** Notmuch Emails
*** Doom-Emacs Lazy load
** Publemacs - Emacs für Publisher
*** Hilfsprogramm, das einen Entscheidungsweg über einen Minibuffer liefert
*** Tastenkürzel optimiert für Redakteure
*** Wissensmanagement in Emacs
*** Fragen
**** Was müssen Coding-Journalisten (CJs) können? 
     - Auch visuelle möglichkeiten wie 3D.js oder nur Infromationsbeschaffung über Sraping, Datenverarbeitung?
** Jouraling
*** Date-Trees
*** CaptureTemplates
*** Archivieren
*** Verschlüsselung
** Gestalten
*** Grundlagen Emacs Lisp
*** JS-Modes und Webdev-Modes
* Packages
** COMMENT Use-Package                                        :packages:
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  ;;(add-to-list 'load-path "<path where use-package is installed>")
 (require 'use-package))
#+END_SRC
** Pakete aus MELPA aktivieren
#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://melpa.org/packages/")) t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  )
#+END_SRC
* Basic Settings                                            :appearance:
** Saving Desktop Sessions
 #+BEGIN_SRC emacs-lisp
 ;; SAVING DESKTOP SESSIONS
 ;;------------------------
 (desktop-save-mode 1)
#+END_SRC
** Sentence end with just one space
#+BEGIN_SRC emacs-lisp
 ;; Set Sentence end to just one space
 (setq sentence-end-double-space nil)
#+END_SRC
** Workarounds 
#+BEGIN_SRC emacs-lisp
 ;; Workarounds
 ;; Bug 34341
 (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
 #+END_SRC
** Default Modes
#+BEGIN_SRC emacs-lisp
;; Default Modes ON
(global-visual-line-mode t)
#+END_SRC
** Start Emacs in fullscreen
#+BEGIN_SRC emacs-lisp
;; Start in Fullscreen
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* Appearance
** [#A] Schriftart                                          :appearance:
 #+BEGIN_SRC  emacs-lisp
 ;; Set variable-pitch font using customize-face variable-pitch
 ;; Set the fonts to format correctly for specific modes. Default is set for fixed
 ;; so we only need to have the exceptions
 (defun set-buffer-variable-pitch ()
   (interactive)
   (variable-pitch-mode t)
   (setq line-spacing 3)
   (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-link nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch)
   )

 (add-hook 'org-mode-hook 'set-buffer-variable-pitch)
 (add-hook 'Info-mode-hook 'set-buffer-variable-pitch)
 #+END_SRC

** [#A] Org                                             :org:appearance:

*** Hide emphasis marker and leading stars
 #+BEGIN_SRC emacs-lisp
 (setq org-hide-emphasis-markers t ;; hide Markers like *this* for bold
       org-hide-leading-stars t)   ;; hide all but one star
 #+END_SRC
*** Org-Bullets                                :appearance:packages:org:
  Schönere Auflist-Zeichen (in UTF8) für Org-Überschriften
  #+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; set custom bullets
 (setq org-bullets-bullet-list '("⚜" "⚙" "❖" "✿" "❄" "❋" "★" "⚛")) ;; "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"
 #+END_SRC
*** Set custom ellipsis (...)                           :appearance:org:
 #+BEGIN_SRC emacs-lisp
 (setq org-ellipsis "⤵")
  #+END_SRC

*** COMMENT Electric Pair mode                          :appearance:org:
 #+BEGIN_SRC emacs-lisp
 ;; ELECTRIC PAIR MODE (BUILT IN)
 ;; ----------------------------
 (electric-pair-mode 1)

 (defvar org-electric-pairs '((?\* . ?\*) (?/ . ?/) (?= . ?=)
                              (?\_ . ?\_) (?~ . ?~) (?+ . ?+)) "Electric pairs for org-mode.")

 (defun org-add-electric-pairs ()
   (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
   (setq-local electric-pair-text-pairs electric-pair-pairs))

 ;; (add-hook 'org-mode-hook 'org-add-electric-pairs)
 #+END_SRC
** [#B] Tweak window chrome                                 :appearance:

    I don't usually use the menu or scroll bar, and they take up useful space.

 #+begin_src emacs-lisp
   (tool-bar-mode 0)
   (menu-bar-mode 0)
   (scroll-bar-mode -1)
 #+end_src

 There's a tiny scroll bar that appears in the minibuffer window. This disables
 that:

 #+begin_src emacs-lisp
   (set-window-scroll-bars (minibuffer-window) nil nil)
 #+end_src

** [#B] Use =moody= for a beautiful modeline       :appearance:packages:

This gives me a truly lovely ribbon-based modeline.

#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (setq moody-mode-line-height 28)
)


#+end_src
** [#C] Use fancy lambdas                                   :appearance:
Ersetzt lamba ( ) mit dem Lambda-Symbol

#+begin_src emacs-lisp
  (global-prettify-symbols-mode t)
#+end_src
** Align Tags                                           :org:appearance:
- [[https://stackoverflow.com/questions/6210840/tag-position-in-org-mode][Quelle Stack Overflow]]
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-in-hook 
  (lambda () (progn 
    (setq org-tags-column (- 5 (window-body-width)))) (org-align-all-tags)))

(add-hook 'focus-out-hook 
  (lambda () (progn 
    (setq org-tags-column (- 5 (window-body-width)))) (org-align-all-tags)))
#+END_SRC
* Agenda
** Shortcuts                                               :agenda:keys:
 #+BEGIN_SRC emacs-lisp
 ;; Locale Shortcuts für die Agenda
 (add-hook 'org-agenda-mode-hook
   (lambda()
     (local-set-key (kbd "S-<up>") 'org-agenda-date-earlier-hours)
     (local-set-key (kbd "S-<down>") 'org-agenda-date-later-hours)
     ))
 #+END_SRC
** Custom Agendas                                               :agenda:
 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-custom-commands '(
         ("g" tags-tree "g" ((org-show-context-detail 'ancestors)))
	 ("w" tags-tree "w" ((org-show-context-detail 'ancestors)))
         ("c" . "My Custom Agendas")
         ("cu" "Unscheduled TODO"
          ((todo ""
            ((org-agenda-overriding-header "\nUnscheduled TODO")
             (org-agenda-skip-function 
	      '(org-agenda-skip-entry-if 'scheduled)
	    ))
	  ))
         nil nil)
 ))
 #+END_SRC
**** COMMENT Patch for Ancestors-View                :el_patch:packages:
#+BEGIN_SRC emacs-lisp
(el-patch-defun org-show-set-visibility (detail)
  "Set visibility around point according to DETAIL.
DETAIL is either nil, `minimal', `local', `ancestors', `lineage',
`tree', `canonical' or t.  See `org-show-context-detail' for more
information."
  ;; Show current heading and possibly its entry, following headline
  ;; or all children.
  (if (and (org-at-heading-p) (not (eq detail (el-patch-swap
                                                'local
                                                'ancestors))))
      (org-flag-heading nil)
    (org-show-entry)
    ;; If point is hidden within a drawer or a block, make sure to
    ;; expose it.
    (dolist (o (overlays-at (point)))
      (when (memq (overlay-get o 'invisible) '(org-hide-block outline))
        (delete-overlay o)))
    (unless (org-before-first-heading-p)
      (org-with-limited-levels
       (cl-case detail
         ((tree canonical t) (org-show-children))
         ((nil minimal ancestors))
         (t (save-excursion
              (outline-next-heading)
              (org-flag-heading nil)))))))
  ;; Show all siblings.
  (when (eq detail 'lineage) (org-show-siblings))
  ;; Show ancestors, possibly with their children.
  (when (memq detail '(ancestors lineage tree canonical t))
    (save-excursion
      (while (org-up-heading-safe)
        (org-flag-heading nil)
        (when (memq detail '(canonical t)) (org-show-entry))
        (when (memq detail '(tree canonical t)) (org-show-children))))))
#+END_SRC

** General Settings                                             :agenda:
#+BEGIN_SRC emacs-lisp
 (setq org-agenda-skip-scheduled-if-done t)
 (setq org-agenda-skip-deadline-if-done t)
 (setq org-deadline-warning-days 3)
#+END_SRC

**** Default Org-Agenda Span
#+BEGIN_SRC emacs-lisp
;; Default span
(setq org-agenda-span 2)
#+END_SRC

* Org mode
** Refile targets                                                  :org:
#+BEGIN_SRC emacs-lisp
;; setting Refile Target
 (setq org-refile-targets '(
   (org-agenda-files :maxlevel . 1)
   ("~/ncloud/org/asomeday.org" :maxlevel . 1))) ;; include all Agenda-Files and all Heading up to ** 
 (setq org-refile-allow-creating-parent-nodes 'confirm)        ;;allow creating nodes. Refile has to end with /newheadingname
#+END_SRC
** Org-Keys belegen                                                :org:
Die grundlegnden Tastenkürzel für den Org-Mode.
#+BEGIN_SRC emacs-lisp
;; Keys
 (global-set-key "\C-cl" 'org-store-link)
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cc" 'org-capture)
#+END_SRC
** Plain lists                                                     :org:
#+BEGIN_SRC emacs-lisp
  ;; Activate plain list cycle
  (setq org-list-use-circular-motion t)
#+END_SRC
** Capture Templates                                               :org:
#+BEGIN_SRC emacs-lisp
;; Capture Templates
(setq org-capture-templates '(
  ("t" "Todo [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "* TODO %i%?")
  ("r" "Todo w Schedule [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "** TODO %^{Titel} \n SCHEDULED: %^{Startzeitpunkt}t")
  ("d" "Todo w Deadline [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "** TODO %^{Titel} \n DEADLINE: %^{Faellig bis}t")
  ("n" "Todo now [inbox]" entry (file+headline "~/ncloud/org/inbox.org" "Tasks") "* TODO %i%? \n SCHEDULED: %T")
  ("z" "Ziele (inbox-Tree)" entry (file+headline "~/ncloud/org/ziele.org" "Inbox") "* TODO %i%?")
  ("s" "prefix für someday-Tasks")
  ("sa" "Todo [someday Arbeit]" entry (file+headline "~/ncloud/org/asomeday.org" "Inbox") "* TODO %i%?")
  ("sh" "Todo [someday Home]" entry (file+headline "~/ncloud/org/hsomeday.org" "Inbox") "* TODO %i%?")
  ("T" "Tickler" entry (file+headline "~/ncloud/org/tickler.org" "Tickler") "** %^{Title} \n %^t")
  ("R" "Scheduled Tickler" entry (file+headline "~/ncloud/org/tickler.org" "Tickler") "** %^{Title} \n SCHEDULED: %^t")
 ))
#+END_SRC
** Lokale Shortcuts                                                :org:
#+BEGIN_SRC emacs-lisp
;; lokale Shortcuts für den org-mode
(add-hook 'org-mode-hook
  (lambda ()
    (define-key org-mode-map "\C-_" 'org-toggle-timestamp-type)
    ))
#+END_SRC
* Rechtschreibung
#+BEGIN_SRC emacs-lisp

;; Rechtschreibung
;;----------------
;; Ich musste noch das deutsche Wörterbuch installieren, bevor es klappt: sudo apt-get install aspell-de
 (setq ispell-dictionary "deutsch8")
 (setq ispell-local-dictionary "deutsch")
 (setq flyspell-default-dictionary "deutsch8")
 (add-hook 'text-mode-hook 'flyspell-mode)
 (autoload 'flyspell-mode "flyspell" "On-the-fly ispell." t)
 (setq flyspell-issue-welcome-flag nil)
#+END_SRC
